{"/home/travis/build/npmtest/node-npmtest-decompress-zip/test.js":"/* istanbul instrument in package npmtest_decompress_zip */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-decompress-zip/lib.npmtest_decompress_zip.js":"/* istanbul instrument in package npmtest_decompress_zip */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_decompress_zip = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_decompress_zip = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-decompress-zip/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-decompress-zip && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_decompress_zip */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_decompress_zip\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_decompress_zip.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_decompress_zip.rollup.js'] =\n            local.assetsDict['/assets.npmtest_decompress_zip.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_decompress_zip.__dirname + '/lib.npmtest_decompress_zip.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-decompress-zip/node_modules/decompress-zip/lib/decompress-zip.js":"'use strict';\n\n// The zip file spec is at http://www.pkware.com/documents/casestudies/APPNOTE.TXT\n// TODO: There is fair chunk of the spec that I have ignored. Need to add\n// assertions everywhere to make sure that we are not dealing with a ZIP type\n// that I haven't designed for. Things like spanning archives, non-DEFLATE\n// compression, encryption, etc.\nvar fs = require('graceful-fs');\nvar Q = require('q');\nvar path = require('path');\nvar util = require('util');\nvar events = require('events');\nvar structures = require('./structures');\nvar signatures = require('./signatures');\nvar extractors = require('./extractors');\nvar FileDetails = require('./file-details');\n\nvar fstat = Q.denodeify(fs.fstat);\nvar read = Q.denodeify(fs.read);\nvar fopen = Q.denodeify(fs.open);\n\nfunction DecompressZip(filename) {\n    events.EventEmitter.call(this);\n\n    this.filename = filename;\n    this.stats = null;\n    this.fd = null;\n    this.chunkSize = 1024 * 1024; // Buffer up to 1Mb at a time\n    this.dirCache = {};\n\n    // When we need a resource, we should check if there is a promise for it\n    // already and use that. If the promise is already fulfilled we don't do the\n    // async work again and we get to queue up dependant tasks.\n    this._p = {}; // _p instead of _promises because it is a lot easier to read\n}\n\nutil.inherits(DecompressZip, events.EventEmitter);\n\nDecompressZip.prototype.openFile = function () {\n    return fopen(this.filename, 'r');\n};\n\nDecompressZip.prototype.closeFile = function () {\n    if (this.fd) {\n        fs.closeSync(this.fd);\n        this.fd = null;\n    }\n};\n\nDecompressZip.prototype.statFile = function (fd) {\n    this.fd = fd;\n    return fstat(fd);\n};\n\nDecompressZip.prototype.list = function () {\n    var self = this;\n\n    this.getFiles()\n    .then(function (files) {\n        var result = [];\n\n        files.forEach(function (file) {\n            result.push(file.path);\n        });\n\n        self.emit('list', result);\n    })\n    .fail(function (error) {\n        self.emit('error', error);\n    })\n    .fin(self.closeFile.bind(self));\n\n    return this;\n};\n\nDecompressZip.prototype.extract = function (options) {\n    var self = this;\n\n    options = options || {};\n    options.path = options.path || '.';\n    options.filter = options.filter || null;\n    options.follow = !!options.follow;\n    options.strip = +options.strip || 0;\n\n    this.getFiles()\n    .then(function (files) {\n        var copies = [];\n\n        if (options.filter) {\n            files = files.filter(options.filter);\n        }\n\n        if (options.follow) {\n            copies = files.filter(function (file) {\n                return file.type === 'SymbolicLink';\n            });\n            files = files.filter(function (file) {\n                return file.type !== 'SymbolicLink';\n            });\n        }\n\n        if (options.strip) {\n            files = files.map(function (file) {\n                if (file.type !== 'Directory') {\n                    // we don't use `path.sep` as we're using `/` in Windows too\n                    var dir = file.parent.split('/');\n                    var filename = file.filename;\n\n                    if (options.strip > dir.length) {\n                        throw new Error('You cannot strip more levels than there are directories');\n                    } else {\n                        dir = dir.slice(options.strip);\n                    }\n\n                    file.path = path.join(dir.join(path.sep), filename);\n                    return file;\n                }\n            });\n        }\n\n        return self.extractFiles(files, options)\n        .then(self.extractFiles.bind(self, copies, options));\n    })\n    .then(function (results) {\n        self.emit('extract', results);\n    })\n    .fail(function (error) {\n        self.emit('error', error);\n    })\n    .fin(self.closeFile.bind(self));\n\n    return this;\n};\n\n// Utility methods\nDecompressZip.prototype.getSearchBuffer = function (stats) {\n    var size = Math.min(stats.size, this.chunkSize);\n    this.stats = stats;\n    return this.getBuffer(stats.size - size, stats.size);\n};\n\nDecompressZip.prototype.getBuffer = function (start, end) {\n    var size = end - start;\n    return read(this.fd, new Buffer(size), 0, size, start)\n    .then(function (result) {\n        return result[1];\n    });\n};\n\nDecompressZip.prototype.findEndOfDirectory = function (buffer) {\n    var index = buffer.length - 3;\n    var chunk = '';\n\n    // Apparently the ZIP spec is not very good and it is impossible to\n    // guarantee that you have read a zip file correctly, or to determine\n    // the location of the CD without hunting.\n    // Search backwards through the buffer, as it is very likely to be near the\n    // end of the file.\n    while (index > Math.max(buffer.length - this.chunkSize, 0) && chunk !== signatures.END_OF_CENTRAL_DIRECTORY) {\n        index--;\n        chunk = buffer.readUInt32LE(index);\n    }\n\n    if (chunk !== signatures.END_OF_CENTRAL_DIRECTORY) {\n        throw new Error('Could not find the End of Central Directory Record');\n    }\n\n    return buffer.slice(index);\n};\n\n// Directory here means the ZIP Central Directory, not a folder\nDecompressZip.prototype.readDirectory = function (recordBuffer) {\n    var record = structures.readEndRecord(recordBuffer);\n\n    return this.getBuffer(record.directoryOffset, record.directoryOffset + record.directorySize)\n    .then(structures.readDirectory.bind(null));\n};\n\nDecompressZip.prototype.getFiles = function () {\n    if (!this._p.getFiles) {\n        this._p.getFiles = this.openFile()\n        .then(this.statFile.bind(this))\n        .then(this.getSearchBuffer.bind(this))\n        .then(this.findEndOfDirectory.bind(this))\n        .then(this.readDirectory.bind(this))\n        .then(this.readFileEntries.bind(this));\n    }\n\n    return this._p.getFiles;\n};\n\nDecompressZip.prototype.readFileEntries = function (directory) {\n    var promises = [];\n    var files = [];\n    var self = this;\n\n    directory.forEach(function (directoryEntry, index) {\n        var start = directoryEntry.relativeOffsetOfLocalHeader;\n        var end = Math.min(self.stats.size, start + structures.maxFileEntrySize);\n        var fileDetails = new FileDetails(directoryEntry);\n\n        var promise = self.getBuffer(start, end)\n        .then(structures.readFileEntry.bind(null))\n        .then(function (fileEntry) {\n            var maxSize;\n\n            if (fileDetails.compressedSize > 0) {\n                maxSize = fileDetails.compressedSize;\n            } else {\n                maxSize = self.stats.size;\n\n                if (index < directory.length - 1) {\n                    maxSize = directory[index + 1].relativeOffsetOfLocalHeader;\n                }\n\n                maxSize -= start + fileEntry.entryLength;\n            }\n\n            fileDetails._offset = start + fileEntry.entryLength;\n            fileDetails._maxSize = maxSize;\n\n            self.emit('file', fileDetails);\n            files[index] = fileDetails;\n        });\n\n        promises.push(promise);\n    });\n\n    return Q.all(promises)\n    .then(function () {\n        return files;\n    });\n};\n\nDecompressZip.prototype.extractFiles = function (files, options, results) {\n    var promises = [];\n    var self = this;\n\n    results = results || [];\n    var fileIndex = 0;\n    files.forEach(function (file) {\n        var promise = self.extractFile(file, options)\n        .then(function (result) {\n            self.emit('progress', fileIndex++, files.length);\n            results.push(result);\n        });\n\n        promises.push(promise);\n    });\n\n    return Q.all(promises)\n    .then(function () {\n        return results;\n    });\n};\n\nDecompressZip.prototype.extractFile = function (file, options) {\n    var destination = path.join(options.path, file.path);\n\n    // Possible compression methods:\n    //    0 - The file is stored (no compression)\n    //    1 - The file is Shrunk\n    //    2 - The file is Reduced with compression factor 1\n    //    3 - The file is Reduced with compression factor 2\n    //    4 - The file is Reduced with compression factor 3\n    //    5 - The file is Reduced with compression factor 4\n    //    6 - The file is Imploded\n    //    7 - Reserved for Tokenizing compression algorithm\n    //    8 - The file is Deflated\n    //    9 - Enhanced Deflating using Deflate64(tm)\n    //   10 - PKWARE Data Compression Library Imploding (old IBM TERSE)\n    //   11 - Reserved by PKWARE\n    //   12 - File is compressed using BZIP2 algorithm\n    //   13 - Reserved by PKWARE\n    //   14 - LZMA (EFS)\n    //   15 - Reserved by PKWARE\n    //   16 - Reserved by PKWARE\n    //   17 - Reserved by PKWARE\n    //   18 - File is compressed using IBM TERSE (new)\n    //   19 - IBM LZ77 z Architecture (PFS)\n    //   97 - WavPack compressed data\n    //   98 - PPMd version I, Rev 1\n\n    if (file.type === 'Directory') {\n        return extractors.folder(file, destination, this);\n    }\n\n    if (file.type === 'File') {\n        switch (file.compressionMethod) {\n        case 0:\n            return extractors.store(file, destination, this);\n\n        case 8:\n            return extractors.deflate(file, destination, this);\n\n        default:\n            throw new Error('Unsupported compression type');\n        }\n    }\n\n    if (file.type === 'SymbolicLink') {\n        if (options.follow) {\n            return extractors.copy(file, destination, this, options.path);\n        } else {\n            return extractors.symlink(file, destination, this, options.path);\n        }\n    }\n\n    throw new Error('Unsupported file type \"' + file.type + '\"');\n};\n\nmodule.exports = DecompressZip;\n","/home/travis/build/npmtest/node-npmtest-decompress-zip/node_modules/decompress-zip/lib/structures.js":"'use strict';\nvar binary = require('binary');\n\nvar convertDateTime = function (dosDate, dosTime) {\n    var year = ((dosDate >> 9) & 0x7F) + 1980;\n    var month = (dosDate >> 5) & 0x0F;\n    var day = dosDate & 0x1F;\n\n    var hour = (dosTime >> 11);\n    var minute = (dosTime >> 5) & 0x3F;\n    var second = (dosTime & 0x1F) * 2;\n\n    var result = new Date(year, month - 1, day, hour, minute, second, 0);\n\n    return result;\n};\n\nvar convertGeneralPurposeFlags = function (value) {\n    var bits = [];\n\n    for (var i = 0; i < 16; i++) {\n        bits[i] = (value >> i) & 1;\n    }\n\n    return {\n        encrypted: !!bits[0],\n        compressionFlag1: !!bits[1],\n        compressionFlag2: !!bits[2],\n        useDataDescriptor: !!bits[3],\n        enhancedDeflating: !!bits[4],\n        compressedPatched: !!bits[5],\n        strongEncryption: !!bits[6],\n        utf8: !!bits[11],\n        encryptedCD: !!bits[13]\n    };\n};\n\nvar parseExternalFileAttributes = function (externalAttributes, platform) {\n    var types = {\n        // In theory, any of these could be set. Realistically, though, it will\n        // be regular, directory or symlink\n        1: 'NamedPipe',\n        2: 'Character',\n        4: 'Directory',\n        6: 'Block',\n        8: 'File',\n        10: 'SymbolicLink',\n        12: 'Socket'\n    };\n\n    switch (platform) {\n\n    case 3: // Unix\n        return {\n            platform: 'Unix',\n            type: types[(externalAttributes >> 28) & 0x0F],\n            mode: (externalAttributes >> 16) & 0xFFF\n        };\n\n    // case 0: // MSDOS\n    default:\n        if (platform !== 0) {\n            console.warn('Possibly unsupported ZIP platform type, ' + platform);\n        }\n\n        var attribs = {\n            A: (externalAttributes >> 5) & 0x01,\n            D: (externalAttributes >> 4) & 0x01,\n            V: (externalAttributes >> 3) & 0x01,\n            S: (externalAttributes >> 2) & 0x01,\n            H: (externalAttributes >> 1) & 0x01,\n            R: externalAttributes & 0x01\n        };\n\n        // With no better guidance we'll make the default permissions ugo+r\n        var mode = parseInt('0444', 8);\n\n        if (attribs.D) {\n            mode |= parseInt('0111', 8); // Set the execute bit\n        }\n\n        if (!attribs.R) {\n            mode |= parseInt('0222', 8); // Set the write bit\n        }\n\n        mode &= ~process.umask();\n\n        return {\n            platform: 'DOS',\n            type: attribs.D ? 'Directory' : 'File',\n            mode: mode\n        };\n    }\n};\n\nvar readEndRecord = function (buffer) {\n    var data = binary.parse(buffer)\n    .word32lu('signature')\n    .word16lu('diskNumber')\n    .word16lu('directoryStartDisk')\n    .word16lu('directoryEntryCountDisk')\n    .word16lu('directoryEntryCount')\n    .word32lu('directorySize')\n    .word32lu('directoryOffset')\n    .word16lu('commentLength')\n    .buffer('comment', 'commentLength')\n    .vars;\n\n    data.comment = data.comment.toString();\n\n    return data;\n};\n\nvar directorySort = function (a, b) {\n    return a.relativeOffsetOfLocalHeader - b.relativeOffsetOfLocalHeader;\n};\n\nvar readDirectory = function (buffer) {\n    var directory = [];\n    var current;\n    var index = 0;\n\n    while (index < buffer.length) {\n        current = binary.parse(buffer.slice(index, index + 46))\n        .word32lu('signature')\n        .word8lu('creatorSpecVersion')\n        .word8lu('creatorPlatform')\n        .word8lu('requiredSpecVersion')\n        .word8lu('requiredPlatform')\n        .word16lu('generalPurposeBitFlag')\n        .word16lu('compressionMethod')\n        .word16lu('lastModFileTime')\n        .word16lu('lastModFileDate')\n        .word32lu('crc32')\n        .word32lu('compressedSize')\n        .word32lu('uncompressedSize')\n        .word16lu('fileNameLength')\n        .word16lu('extraFieldLength')\n        .word16lu('fileCommentLength')\n        .word16lu('diskNumberStart')\n        .word16lu('internalFileAttributes')\n        .word32lu('externalFileAttributes')\n        .word32lu('relativeOffsetOfLocalHeader')\n        .vars;\n\n        index += 46;\n\n        current.generalPurposeFlags = convertGeneralPurposeFlags(current.generalPurposeBitFlag);\n        current.fileAttributes = parseExternalFileAttributes(current.externalFileAttributes, current.creatorPlatform);\n\n        current.modifiedTime = convertDateTime(current.lastModFileDate, current.lastModFileTime);\n        current.fileName = current.extraField = current.fileComment = '';\n        current.headerLength = 46 + current.fileNameLength + current.extraFieldLength + current.fileCommentLength;\n\n        if (current.fileNameLength > 0) {\n            current.fileName = buffer.slice(index, index + current.fileNameLength).toString();\n            index += current.fileNameLength;\n        }\n\n        if (current.extraFieldLength > 0) {\n            current.extraField = buffer.slice(index, index + current.extraFieldLength).toString();\n            index += current.extraFieldLength;\n        }\n\n        if (current.fileCommentLength > 0) {\n            current.fileComment = buffer.slice(index, index + current.fileCommentLength).toString();\n            index += current.fileCommentLength;\n        }\n\n        if (current.fileAttributes.type !== 'Directory' && current.fileName.substr(-1) === '/') {\n            // TODO: check that this is a reasonable check\n            current.fileAttributes.type = 'Directory';\n        }\n\n        directory.push(current);\n    }\n\n    directory.sort(directorySort);\n\n    return directory;\n};\n\nvar readFileEntry = function (buffer) {\n    var index = 0;\n\n    var fileEntry = binary.parse(buffer.slice(index, 30))\n    .word32lu('signature')\n    .word16lu('versionNeededToExtract')\n    .word16lu('generalPurposeBitFlag')\n    .word16lu('compressionMethod')\n    .word16lu('lastModFileTime')\n    .word16lu('lastModFileDate')\n    .word32lu('crc32')\n    .word32lu('compressedSize')\n    .word32lu('uncompressedSize')\n    .word16lu('fileNameLength')\n    .word16lu('extraFieldLength')\n    .vars;\n\n    index += 30;\n\n    fileEntry.fileName = fileEntry.extraField = '';\n\n    fileEntry.entryLength = 30 + fileEntry.fileNameLength + fileEntry.extraFieldLength;\n\n    if (fileEntry.entryLength > structures.maxFileEntrySize) {\n        throw new Error('File entry unexpectedly large: ' + fileEntry.entryLength + ' (max: ' + structures.maxFileEntrySize + ')');\n    }\n\n    if (fileEntry.fileNameLength > 0) {\n        fileEntry.fileName = buffer.slice(index, index + fileEntry.fileNameLength).toString();\n        index += fileEntry.fileNameLength;\n    }\n\n    if (fileEntry.extraFieldLength > 0) {\n        fileEntry.extraField = buffer.slice(index, index + fileEntry.extraFieldLength).toString();\n        index += fileEntry.extraFieldLength;\n    }\n\n    return fileEntry;\n};\n\nvar structures = module.exports = {\n    readEndRecord: readEndRecord,\n    readDirectory: readDirectory,\n    readFileEntry: readFileEntry,\n    maxFileEntrySize: 4096\n};\n","/home/travis/build/npmtest/node-npmtest-decompress-zip/node_modules/decompress-zip/lib/signatures.js":"module.exports = {\n    LOCAL_FILE_HEADER: 0x04034b50,\n    DATA_DESCRIPTOR_RECORD: 0x08074b50,\n    ARCHIVE_EXTRA_DATA: 0x08064b50,\n    CENTRAL_FILE_HEADER: 0x02014b50,\n    HEADER: 0x05054b50,\n    ZIP64_END_OF_CENTRAL_DIRECTORY: 0x06064b50,\n    ZIP64_END_OF_CENTRAL_DIRECTORY_LOCATOR: 0x07064b50,\n    END_OF_CENTRAL_DIRECTORY: 0x06054b50\n};\n","/home/travis/build/npmtest/node-npmtest-decompress-zip/node_modules/decompress-zip/lib/extractors.js":"var stream = require('stream');\nif (!stream.Readable) {\n    var stream = require('readable-stream');\n}\nvar fs = require('graceful-fs');\nvar Q = require('q');\nvar path = require('path');\nvar zlib = require('zlib');\nvar touch = Q.denodeify(require('touch'));\nvar mkpath = Q.denodeify(require('mkpath'));\nvar writeFile = Q.denodeify(fs.writeFile);\nvar inflateRaw = Q.denodeify(zlib.inflateRaw);\nvar symlink = Q.denodeify(fs.symlink);\nvar stat = Q.denodeify(fs.stat);\n\n// Use a cache of promises for building the directory tree. This allows us to\n// correctly queue up file extractions for after their path has been created,\n// avoid trying to create the path twice and still be async.\nvar mkdir = function (dir, cache, mode) {\n    dir = path.normalize(path.resolve(process.cwd(), dir) + path.sep);\n    if (mode === undefined) {\n        mode = parseInt('777', 8) & (~process.umask());\n    }\n\n    if (!cache[dir]) {\n        var parent;\n\n        if (fs.existsSync(dir)) {\n            parent = new Q();\n        } else {\n            parent = mkdir(path.dirname(dir), cache, mode);\n        }\n\n        cache[dir] = parent.then(function () {\n            return mkpath(dir, mode);\n        });\n    }\n\n    return cache[dir];\n};\n\n// Utility methods for writing output files\nvar extractors = {\n    folder: function (folder, destination, zip) {\n        return mkdir(destination, zip.dirCache, folder.mode)\n        .then(function () {\n            return {folder: folder.path};\n        });\n    },\n    store: function (file, destination, zip) {\n        var writer;\n\n        if (file.uncompressedSize === 0) {\n            writer = touch.bind(null, destination);\n        } else if (file.uncompressedSize <= zip.chunkSize) {\n            writer = function () {\n                return zip.getBuffer(file._offset, file._offset + file.uncompressedSize)\n                .then(function (buffer) {\n                    return writeFile(destination, buffer, { mode: file.mode });\n                });\n            };\n        } else {\n            var input = new stream.Readable();\n            input.wrap(fs.createReadStream(zip.filename, {start: file._offset, end: file._offset + file.uncompressedSize - 1}));\n            writer = pipePromise.bind(null, input, destination, { mode: file.mode });\n        }\n\n        return mkdir(path.dirname(destination), zip.dirCache)\n        .then(writer)\n        .then(function () {\n            return {stored: file.path};\n        });\n    },\n    deflate: function (file, destination, zip) {\n        // For Deflate you don't actually need to specify the end offset - and\n        // in fact many ZIP files don't include compressed file sizes for\n        // Deflated files so we don't even know what the end offset is.\n\n        return mkdir(path.dirname(destination), zip.dirCache)\n        .then(function () {\n            if (file._maxSize <= zip.chunkSize) {\n                return zip.getBuffer(file._offset, file._offset + file._maxSize)\n                .then(inflateRaw)\n                .then(function (buffer) {\n                    return writeFile(destination, buffer, { mode: file.mode });\n                });\n            } else {\n                // For node 0.8 we need to create the Zlib stream and attach\n                // handlers in the same tick of the event loop, which is why we do\n                // the creation in here\n                var input = new stream.Readable();\n                input.wrap(fs.createReadStream(zip.filename, {start: file._offset}));\n                var inflater = input.pipe(zlib.createInflateRaw({highWaterMark: 32 * 1024}));\n\n                return pipePromise(inflater, destination, { mode: file.mode });\n            }\n        })\n        .then(function () {\n            return {deflated: file.path};\n        });\n    },\n    symlink: function (file, destination, zip, basePath) {\n        var parent = path.dirname(destination);\n        return mkdir(parent, zip.dirCache)\n        .then(function () {\n            return getLinkLocation(file, destination, zip, basePath);\n        })\n        .then(function (linkTo) {\n            return symlink(path.resolve(parent, linkTo), destination)\n            .then(function () {\n                return {symlink: file.path, linkTo: linkTo};\n            });\n        });\n    },\n    // Make a shallow copy of the file/directory this symlink points to instead\n    // of actually creating a link\n    copy: function (file, destination, zip, basePath) {\n        var type;\n        var parent = path.dirname(destination);\n\n        return mkdir(parent, zip.dirCache)\n        .then(function () {\n            return getLinkLocation(file, destination, zip, basePath);\n        })\n        .then(function (linkTo) {\n            return stat(path.resolve(parent, linkTo))\n            .then(function (stats) {\n                if (stats.isFile()) {\n                    type = 'File';\n                    var input = new stream.Readable();\n                    input.wrap(fs.createReadStream(path.resolve(parent, linkTo)));\n                    return pipePromise(input, destination);\n                } else if (stats.isDirectory()) {\n                    type = 'Directory';\n                    return mkdir(destination, zip.dirCache);\n                } else {\n                    throw new Error('Could not follow symlink to unknown file type');\n                }\n            })\n            .then(function () {\n                return {copy: file.path, original: linkTo, type: type};\n            });\n        });\n    }\n};\n\nvar getLinkLocation = function (file, destination, zip, basePath) {\n    var parent = path.dirname(destination);\n    return zip.getBuffer(file._offset, file._offset + file.uncompressedSize)\n    .then(function (buffer) {\n        var linkTo = buffer.toString();\n        var fullLink = path.resolve(parent, linkTo);\n\n        if (path.relative(basePath, fullLink).slice(0, 2) === '..') {\n            throw new Error('Symlink links outside archive');\n        }\n\n        return linkTo;\n    });\n};\n\nvar pipePromise = function (input, destination, options) {\n    var deferred = Q.defer();\n    var output = fs.createWriteStream(destination, options);\n    var errorHandler = function (error) {\n        deferred.reject(error);\n    };\n\n    input.on('error', errorHandler);\n    output.on('error', errorHandler);\n\n    // For node 0.8 we can't just use the 'finish' event of the pipe\n    input.on('end', function () {\n        output.end(function () {\n            deferred.resolve();\n        });\n    });\n\n    input.pipe(output, {end: false});\n\n    return deferred.promise;\n};\n\nmodule.exports = extractors;\n","/home/travis/build/npmtest/node-npmtest-decompress-zip/node_modules/decompress-zip/lib/file-details.js":"// Objects with this prototype are used as the public representation of a file\nvar path = require('path');\n\nvar FileDetails = function (directoryEntry) {\n    // TODO: Add 'extra field' support\n\n    this._offset = 0;\n    this._maxSize = 0;\n\n    this.parent = path.dirname(directoryEntry.fileName);\n    this.filename = path.basename(directoryEntry.fileName);\n    this.path = path.normalize(directoryEntry.fileName);\n\n    this.type = directoryEntry.fileAttributes.type;\n    this.mode = directoryEntry.fileAttributes.mode;\n    this.compressionMethod = directoryEntry.compressionMethod;\n    this.modified = directoryEntry.modifiedTime;\n    this.crc32 = directoryEntry.crc32;\n    this.compressedSize = directoryEntry.compressedSize;\n    this.uncompressedSize = directoryEntry.uncompressedSize;\n    this.comment = directoryEntry.fileComment;\n\n    this.flags = {\n        encrypted: directoryEntry.generalPurposeFlags.encrypted,\n        compressionFlag1: directoryEntry.generalPurposeFlags.compressionFlag1,\n        compressionFlag2: directoryEntry.generalPurposeFlags.compressionFlag2,\n        useDataDescriptor: directoryEntry.generalPurposeFlags.useDataDescriptor,\n        enhancedDeflating: directoryEntry.generalPurposeFlags.enhancedDeflating,\n        compressedPatched: directoryEntry.generalPurposeFlags.compressedPatched,\n        strongEncryption: directoryEntry.generalPurposeFlags.strongEncryption,\n        utf8: directoryEntry.generalPurposeFlags.utf8,\n        encryptedCD: directoryEntry.generalPurposeFlags.encryptedCD\n    };\n\n};\n\nmodule.exports = FileDetails;\n"}